// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
insert into scudo.refresh_tokens (user_id, hashed_token, expires_at)
values ($1, $2, $3)
`

type CreateRefreshTokenParams struct {
	UserID      uuid.UUID
	HashedToken string
	ExpiresAt   time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.UserID, arg.HashedToken, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
insert into scudo.users (email, hashed_password, metadata)
values ($1, $2, $3)
returning id, email, hashed_password, metadata, created_at, updated_at
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
	Metadata       json.RawMessage
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (ScudoUser, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.Metadata)
	var i ScudoUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
select id, user_id, hashed_token, expires_at, revoked, created_at, updated_at from scudo.refresh_tokens where user_id = $1
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]ScudoRefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScudoRefreshToken
	for rows.Next() {
		var i ScudoRefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.HashedToken,
			&i.ExpiresAt,
			&i.Revoked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, hashed_password, metadata, created_at, updated_at from scudo.users where email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (ScudoUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i ScudoUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, email, hashed_password, metadata, created_at, updated_at from scudo.users where id = $1 limit 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (ScudoUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i ScudoUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeRefreshTokenByID = `-- name: RevokeRefreshTokenByID :exec
update scudo.refresh_tokens
set revoked = true
where id = $1
`

func (q *Queries) RevokeRefreshTokenByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshTokenByID, id)
	return err
}

const userWithEmailExists = `-- name: UserWithEmailExists :one
select exists (select 1 from scudo.users where email = $1)
`

func (q *Queries) UserWithEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userWithEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
